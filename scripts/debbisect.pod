=head1 NAME

debbisect - bisect Debian snapshots

=head1 SYNOPSIS

B<debbisect> [I<OPTIONS>] I<GOOD> I<BAD> I<SCRIPT>

=head1 DESCRIPTION

Execute a script or a shell snippet for a known good timestamp and a known bad
timestamp and then bisect the timestamps until a timestamp from
snapshot.debian.org is found where the script first fails. Environment
variables are used to tell the script which timestamp to test. See
I<ENVIRONMENT VARIABLES> below. At the end of the execution, the files log.good
and log.bad are the log files of the last good and last bad run, respectively.
By default, a caching mirror is executed to reduce bandwidth usage on
snapshot.debian.org.  If you plan to run debbisect multiple times, consider
setting a non-temporary cache directory with the --cache option.

=head1 OPTIONS

=over 8

=item B<-h,--help>

show this help message and exit

=item B<-d,--debug>

Print lots of debugging statements

=item B<-v,--verbose>

Be verbose

=item B<--cache>=I<CACHE>

cache directory -- by default $TMPDIR is used

=item B<--nocache>

disable cache

=item B<--port>=I<PORT>

manually choose port number for the apt cache instead of automatically choosing
a free port

=back

=head1 EXAMPLES

Just run "do_something" which runs the test and returns a non-zero exit on
failure.

    $ scripts/debbisect "last week" today "mmdebstrap --customize-hook='chroot \"\$1\" do_something' unstable - \$DEBIAN_BISECT_MIRROR >/dev/null"
    $ diff -u log.good log.bad

Since the command can easily become very long and quoting very involved, lets
instead use a script:

    $ cat << END > script.sh
    > #!/bin/sh
    > set -exu
    > mmdebstrap \
    >     --verbose \
    >     --aptopt='Acquire::Check-Valid-Until "false"' \
    >     --variant=apt \
    >     --include=pkga,pkgb,pkgc \
    >     --customize-hook='chroot "$1" dpkg -l' \
    >     --customize-hook='chroot "$1" do_something' \
    >     unstable \
    >     - \
    >     $DEBIAN_BISECT_MIRROR \
    >     >/dev/null
    > END
    $ chmod +x script.sh
    $ scripts/debbisect --verbose --cache=./cache "two years ago" yesterday ./script.sh
    $ diff -u log.good log.bad
    $ rm -r ./cache

This example sets Acquire::Check-Valid-Until to not fail on snapshot timestamps
from "two years ago", uses the "apt" variant (only Essential:yes plus apt),
installs the packages required for the test using --include, runs "dpkg -l" so
that we can see which packages differed in the logs at the end and uses
--cache=cache so that the apt cache does not get discarded at the end and the
command can be re-run without downloading everything from snapshot.debian.org
again.

=head1 TIMESTAMPS

Valid good and bad timestamp formats are either:

=over 8

=item * the format used by snapshot.debian.org

=item * ISO 8601 (with or without time, seconds and timezone)

=item * RFC 2822 (used in debian/changelog)

=item * all formats understood by the Python dateutil module (if installed)

=item * all formats understood by the Python parsedatetime module (if installed)

=back

Without specifying the timezone explicitly, the local offset is used.

Examples (corresponding to the items in above list, respectively):

=over 8

=item * 20200313T065326Z

=item * 2020-03-13T06:53:26+00:00

=item * Fri, 29 Nov 2019 14:00:08 +0100

=item * 5:50 A.M. on June 13, 1990

=item * two weeks ago

=back

=head1 ENVIRONMENT VARIABLES

The following environment variables are available to the test script:

=over 8

=item C<DEBIAN_BISECT_MIRROR>

Contains the caching mirror address.

=item C<DEBIAN_BISECT_EPOCH>

Contains an integer representing the unix epoch of the current timestamp. The
value of this variable can directly be assigned to SOURCE_DATE_EPOCH.

=item C<DEBIAN_BISECT_TIMESTAMP>

Contains a timestamp in the format used by snapshot.debian.org. Can also be
generated from DEBIAN_BISECT_EPOCH via: C<date --utc
--date=@$DEBIAN_BISECT_EPOCH +%Y%m%dT%H%M%SZ>

=back

=head1 AUTHOR

Johannes 'josch' Schauer <josch@debian.org>
