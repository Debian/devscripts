#!/usr/bin/env python3
#
# Copyright (C) 2017 Chris Lamb <lamby@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import bz2
import collections
import json
import logging
import os
import sys
import time

import apt
import requests

try:
    from xdg.BaseDirectory import xdg_cache_home
except ImportError:
    print("This script requires the xdg python3 module.", file=sys.stderr)
    print(
        "Please install the python3-xdg Debian package in order to use" "this utility.",
        file=sys.stderr,
    )
    sys.exit(1)


class ReproducibleCheck:
    HELP = """
        Reports on the reproducible status of installed packages.
        For more details please see <https://reproducible-builds.org>.
    """

    NAME = os.path.basename(__file__)
    VERSION = 1

    STATUS_URL = (
        "https://tests.reproducible-builds.org/debian/" "reproducible-tracker.json.bz2"
    )

    CACHE = os.path.join(xdg_cache_home, NAME, os.path.basename(STATUS_URL))
    CACHE_AGE_SECONDS = 86400

    @classmethod
    def parse(cls):
        parser = argparse.ArgumentParser(description=cls.HELP)

        parser.add_argument(
            "-d",
            "--debug",
            help="show debugging messages",
            default=False,
            action="store_true",
        )

        parser.add_argument(
            "-r",
            "--raw",
            help="print unreproducible binary packages only (for dd-list -i)",
            default=False,
            action="store_true",
        )

        parser.add_argument(
            "--version",
            help="print version and exit",
            default=False,
            action="store_true",
        )

        return cls(parser.parse_args())

    def __init__(self, args):
        self.args = args

        logging.basicConfig(
            format="%(asctime).19s %(levelname).1s: %(message)s",
            level=logging.DEBUG if args.debug else logging.INFO,
        )

        self.log = logging.getLogger()

    def main(self):
        if self.args.version:
            print(f"{self.NAME} version {self.VERSION}")
            return 0

        self.update_cache()

        data = self.get_data()
        installed = self.get_installed_packages()
        unreproducible = {x: y for x, y in installed.items() if x in data}

        if self.args.raw:
            self.output_raw(unreproducible, installed)
        else:
            self.output_by_source(unreproducible, installed)

        return 0

    def update_cache(self):
        self.log.debug("Checking cache file %s ...", self.CACHE)

        try:
            if os.path.getmtime(self.CACHE) >= time.time() - self.CACHE_AGE_SECONDS:
                self.log.debug("Cache is up to date")
                return
        except OSError:
            pass

        new_cache = f"{self.CACHE}.new"
        self.log.info("Updating cache to %s...", new_cache)

        response = requests.get(self.STATUS_URL)

        os.makedirs(os.path.dirname(self.CACHE), exist_ok=True)

        with open(new_cache, "wb") as f:
            for x in response.iter_content(chunk_size=2 ** 16):
                f.write(x)

        os.rename(new_cache, self.CACHE)

    def get_data(self):
        self.log.debug("Loading data from cache %s", self.CACHE)

        data = set()
        with bz2.open(self.CACHE) as f:
            all_packages = json.loads(f.read().decode("utf-8"))

            for x in all_packages:
                for y in x["architecture_details"]:
                    if y["status"] != ['FTBR', 'unreproducible']:
                        continue

                    data.add((x["package"], y["architecture"], x["version"]))

        return data

    @staticmethod
    def get_installed_packages():
        result = collections.defaultdict(list)

        for x in apt.Cache():
            for y in x.versions:
                if not y.is_installed:
                    continue

                key = (y.source_name, y.architecture, y.version)
                result[key].append(x.shortname)

        return result

    @staticmethod
    def output_by_source(unreproducible, installed):
        num_installed = sum(len(x) for x in installed.keys())
        num_unreproducible = sum(len(x) for x in unreproducible.keys())
        default_architecture = apt.apt_pkg.config.find("APT::Architecture")

        for key, binaries in sorted(unreproducible.items()):
            source, architecture, version = key

            binaries_fmt = (
                "({}) ".format(", ".join(binaries)) if binaries != [source] else ""
            )

            print(
                "{}{} ({}) is unreproducible {}".format(
                    source,
                    f"/{architecture}" if architecture != default_architecture else "",
                    version,
                    binaries_fmt,
                ),
                end="",
            )
            print(f"<https://tests.reproducible-builds.org/debian/{source}>")

        percent = 100.0 * num_unreproducible / num_installed
        print(
            f"{num_unreproducible}/{num_installed} ({percent:.2f}%) of installed binary packages are unreproducible."
        )

    @staticmethod
    def output_raw(unreproducible, installed):  # pylint: disable=unused-argument
        for x in sorted(x for xs in unreproducible.values() for x in set(xs)):
            print(x)


if __name__ == "__main__":
    try:
        sys.exit(ReproducibleCheck.parse().main())
    except (KeyboardInterrupt, BrokenPipeError):
        sys.exit(1)
