#!/usr/bin/env python3
#
# Copyright (C) 2017 Chris Lamb <lamby@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import bz2
import apt
import sys
import json
import logging
import requests
import argparse
import collections

from xdg.BaseDirectory import xdg_cache_home


class ReproducibleCheck(object):
    HELP = """
        Reports on the reproducible status of installed packages.
        For more details please see <https://reproducible-builds.org>.
    """

    NAME = os.path.basename(__file__)
    CACHE = os.path.join(xdg_cache_home, NAME, 'reproducible.json.bz')
    VERSION = 1
    STATUS_URL = 'https://tests.reproducible-builds.org/reproducible.json.bz2'

    @classmethod
    def parse(cls):
        parser = argparse.ArgumentParser(description=cls.HELP)

        parser.add_argument(
            '-d',
            '--debug',
            help="show debugging messages",
            default=False,
            action='store_true',
        )

        parser.add_argument(
            '-r',
            '--raw',
            help="print unreproducible binary packages only (for dd-list -i)",
            default=False,
            action='store_true',
        )

        parser.add_argument(
            '--version',
            help="print version and exit",
            default=False,
            action='store_true',
        )

        return cls(parser.parse_args())

    def __init__(self, args):
        self.args = args

        logging.basicConfig(
            format='%(asctime).19s %(levelname).1s: %(message)s',
            level=logging.DEBUG if args.debug else logging.INFO,
        )

        self.log = logging.getLogger()

    def main(self):
        if self.args.version:
            print("{} version {}".format(self.NAME, self.VERSION))
            return 0

        self.update_cache()

        data = self.get_data()
        installed = self.get_installed_packages()
        unreproducible = {x: y for x, y in installed.items() if x in data}

        if self.args.raw:
            self.output_raw(unreproducible, installed)
        else:
            self.output_by_source(unreproducible, installed)

        return 0

    def update_cache(self):
        self.log.debug("Checking cache file %s ...", self.CACHE)

        if os.path.exists(self.CACHE):
            self.log.debug("Cache is up to date")
            return

        self.log.info("Updating cache...")

        response = requests.get(self.STATUS_URL)

        os.makedirs(os.path.dirname(self.CACHE), exist_ok=True)

        with open(self.CACHE, 'wb+') as f:
            f.write(response.content)

    def get_data(self):
        self.log.debug("Loading data from cache %s", self.CACHE)

        with bz2.open(self.CACHE) as f:
            return {
                (x['package'], x['architecture'], x['version'])
                for x in json.loads(f.read().decode('utf-8'))
                if x['status'] == 'unreproducible'
            }

    def get_installed_packages(self):
        result = collections.defaultdict(list)

        for x in apt.Cache():
            for y in x.versions:
                if not y.is_installed:
                    continue

                key = (y.source_name, y.architecture, y.version)
                result[key].append(x.shortname)

        return result

    def output_by_source(self, unreproducible, installed):
        num_installed = sum(len(x) for x in installed.keys())
        num_unreproducible = sum(len(x) for x in unreproducible.keys())

        for key, binaries in sorted(unreproducible.items()):
            source, architecture, version = key

            binaries_fmt = '({}) '.format(', '.join(binaries)) \
                if binaries != [source] else ''

            print("{} ({}) is unreproducible {}".format(
                source,
                version,
                binaries_fmt,
            ), end='')
            print("<https://tests.reproducible-builds.org/debian/{}>".format(source))

        print("{}/{} ({:.2f}%) of installed binary packages are unreproducible.".format(
            num_unreproducible,
            num_installed,
            100. * num_unreproducible / num_installed,
        ))

    def output_raw(self, unreproducible, installed):
        for x in sorted(x for xs in unreproducible.values() for x in xs):
            print(x)


if __name__ == '__main__':
    try:
        sys.exit(ReproducibleCheck.parse().main())
    except (KeyboardInterrupt, BrokenPipeError):
        sys.exit(1)
