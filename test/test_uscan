#!/bin/sh

# Copyright (C) 2013, Rafael Laboissiere <rafael@laboissiere.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# On Debian systems, the complete text of the GNU General Public License
# version 3 can be found in the /usr/share/common-licenses/GPL-3 file.

if test "$1" = --installed; then
    COMMAND="uscan --no-conf"
    shift
else
    top_srcdir=$(readlink -f "${0%/*}/..")
    COMMAND="perl -I $top_srcdir $top_srcdir/scripts/uscan.pl --no-conf --repack-compression=xz"
fi

cleanup(){
    kill -9 $(cat $TMPDIR/repo/pid)
    rm -rf $TMPDIR
}

trap cleanup 1 2 3 13 15

containsName(){
  echo "$1" | fgrep -q "$2"
  echo $?
}

. "${0%/*}/shunit2-helper-functions.sh"

# The following tests do the following: (1) create a minimal Debian package
# directory, containing minimal files debian/{changelog,watch,copyright},
# (2) create a minimal repository, containing a tarball (built on the fly),
# (3) start an HTTP server that works offline, using the SimpleHTTPServer
# module of Python, and (4) run uscan inside that minimal universe.


# The following function tests the --repack feature
helperTestRepack() {
    from_comp="$1"
    to_comp="$2"
    file_output="$3"

    PKG=foo
    PORT=8000
    TMPDIR=$(mktemp -d)

    mkdir -p $TMPDIR/$PKG/debian

    cat <<END > $TMPDIR/$PKG/debian/watch
version=3
http://localhost:$PORT/$PKG-(\d).tar.$from_comp
END

    cat <<END > $TMPDIR/$PKG/debian/changelog
$PKG (0-1) unstable; urgency=low

  * Initial release

 -- Joe Developer <jd@debian.org>  Mon, 02 Nov 2013 22:21:31 -0100
END

    mkdir -p $TMPDIR/repo/foo
    touch $TMPDIR/repo/foo/content

    ( cd $TMPDIR/repo ;
      tar cfa $PKG-1.tar.$from_comp * ;
      python -m SimpleHTTPServer $PORT &
      echo $! > pid )

    OUTPUT=$( (cd $TMPDIR/$PKG ; $COMMAND --verbose --repack --repack-compression=$to_comp) )

    TARBALL=${PKG}_1.orig.tar.$to_comp
    assertTrue 'pristine tarball is not created' "[ -f $TMPDIR/$TARBALL ]"
    assertNotNull "pristine tarball is not $to_comp-compressed" \
                  "$( file -L $TMPDIR/$TARBALL | grep "$file_output" )"
    CONTENTS="$(tar atf $TMPDIR/$TARBALL)"
    assertTrue 'file contents missing'	\
                $(containsName "$CONTENTS" content)

    cleanup

}

testRepackGZ_XZ() { helperTestRepack "gz" "xz" "XZ compressed data" ; }
testRepackGZ_BZ2() { helperTestRepack "gz" "bz2" "bzip2 compressed data" ; }
testRepackBZ2_GZ() { helperTestRepack "bz2" "gz" "gzip compressed data" ; }
testRepackGZ_GZ() { helperTestRepack "gz" "gz" "gzip compressed data" ; }
testRepackXZ_XZ() { helperTestRepack "xz" "xz" "XZ compressed data" ; }

# The following function tests the --repack feature, with a zip file
testRepackZip_XZ() {
    to_comp=xz
    file_output="XZ compressed data"

    PKG=foo
    PORT=8000
    TMPDIR=$(mktemp -d)

    mkdir -p $TMPDIR/$PKG/debian

    cat <<END > $TMPDIR/$PKG/debian/watch
version=3
http://localhost:$PORT/$PKG-(\d).zip
END

    cat <<END > $TMPDIR/$PKG/debian/changelog
$PKG (0-1) unstable; urgency=low

  * Initial release

 -- Joe Developer <jd@debian.org>  Mon, 02 Nov 2013 22:21:31 -0100
END

    mkdir -p $TMPDIR/repo/foo
    touch $TMPDIR/repo/foo/content

    ( cd $TMPDIR/repo ;
      zip -r $PKG-1.zip * ;
      python -m SimpleHTTPServer $PORT &
      echo $! > pid )

    OUTPUT=$( (cd $TMPDIR/$PKG ; $COMMAND --verbose --repack --repack-compression=$to_comp) )

    TARBALL=${PKG}_1.orig.tar.$to_comp
    assertTrue 'pristine tarball is not created' "[ -f $TMPDIR/$TARBALL ]"
    assertNotNull "pristine tarball is not $to_comp-compressed" \
                  "$( file -L $TMPDIR/$TARBALL | grep "$file_output" )"
    CONTENTS="$(tar atf $TMPDIR/$TARBALL)"
    assertTrue 'file contents missing'	\
                $(containsName "$CONTENTS" content)

    cleanup

}


# The following function tests the Files-Excluded feature of uscan, which
# allows the selective exclusion of files from the upstream tarball before
# repacking it.

testFileExclusion() {

    PKG=foo
    PORT=8000
    TMPDIR=$(mktemp -d)

    mkdir -p $TMPDIR/$PKG/debian

    cat <<END > $TMPDIR/$PKG/debian/watch
version=3
http://localhost:$PORT/$PKG-(\d).tar.gz
END

    cat <<END > $TMPDIR/$PKG/debian/changelog
$PKG (0-1) unstable; urgency=low

  * Initial release

 -- Joe Developer <jd@debian.org>  Mon, 02 Nov 2013 22:21:31 -0100
END

    cat <<END > $TMPDIR/$PKG/debian/copyright
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Files-Excluded: exclude-this
 exclude-dir
 .*
 js/jquery.js
END

    # Test matching with escaped characters
    printf ' ;\ echo\ baz;\ #\n' >> $TMPDIR/$PKG/debian/copyright


    mkdir -p $TMPDIR/repo
    touch $TMPDIR/repo/include-this
    touch $TMPDIR/repo/exclude-this
    touch $TMPDIR/repo/.hidden
    mkdir -p "$TMPDIR/repo/; echo baz; #/"
    mkdir -p $TMPDIR/repo/exclude-dir
    touch $TMPDIR/repo/exclude-dir/file
    mkdir -p $TMPDIR/repo/exclude-dir/subdir
    touch $TMPDIR/repo/exclude-dir/subdir/file2
    mkdir -p $TMPDIR/repo/docs/html/js/
    touch $TMPDIR/repo/docs/html/js/jquery.js

    ( cd $TMPDIR/repo ;
      tar cfz $PKG-1.tar.gz * ;
      python -m SimpleHTTPServer $PORT &
      echo $! > pid )

    (cd $TMPDIR/$PKG ; $COMMAND)

    TARBALL=${PKG}_1+dfsg.orig.tar.gz
    assertTrue 'pristine tarball is not created' "[ -f $TMPDIR/$TARBALL ]"
    assertNotNull 'pristine tarball is not gzip-compressed' \
                  "$( file $TMPDIR/$TARBALL | grep 'gzip compressed data' )"
    CONTENTS="$(tar atf $TMPDIR/$TARBALL)"
    assertTrue 'file that must be present is excluded in the tarball'	\
                $(containsName "$CONTENTS" include-this)
    assertFalse 'file that must be excluded is present in the tarball'	\
                $(containsName "$CONTENTS" exclude-this)
    assertFalse "dir that must be excluded is present in the tarball"	\
                $(containsName "$CONTENTS" exclude-dir)
    assertFalse "subdir that must be excluded is present in the tarball"	\
                $(containsName "$CONTENTS" subdir)
    assertFalse "non-root-file that must be excluded is present in the tarball"	\
                $(containsName "$CONTENTS" jquery.js)
    assertFalse "hidden file that must be excluded is present in the zip file"	\
                $(containsName "$CONTENTS" .hidden)
    assertFalse "path with whitespace that must be excluded is present"	\
                $(containsName "$CONTENTS" "; echo baz; #/")

    cleanup

}

# The same, for a zip file

testFileExclusionZip() {

    PKG=foo
    PORT=8000
    TMPDIR=$(mktemp -d)

    mkdir -p $TMPDIR/$PKG/debian

    cat <<END > $TMPDIR/$PKG/debian/watch
version=3
http://localhost:$PORT/$PKG-(\d).zip
END

    cat <<END > $TMPDIR/$PKG/debian/changelog
$PKG (0-1) unstable; urgency=low

  * Initial release

 -- Joe Developer <jd@debian.org>  Mon, 02 Nov 2013 22:21:31 -0100
END

    cat <<END > $TMPDIR/$PKG/debian/copyright
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Files-Excluded: exclude-this
 exclude-dir
 .*
END

    # Test matching with escaped characters
    printf ' ;\ echo\ baz;\ #\n' >> $TMPDIR/$PKG/debian/copyright


    mkdir -p $TMPDIR/repo
    touch $TMPDIR/repo/include-this
    touch $TMPDIR/repo/exclude-this
    touch $TMPDIR/repo/.hidden
    mkdir -p "$TMPDIR/repo/; echo baz; #/"
    mkdir -p $TMPDIR/repo/exclude-dir/subdir
    touch $TMPDIR/repo/exclude-dir/file
    touch $TMPDIR/repo/exclude-dir/subdir/file2

    ( cd $TMPDIR/repo ;
      zip -r $PKG-1.zip * ;
      python -m SimpleHTTPServer $PORT &
      echo $! > pid )

    OUTPUT=$( (cd $TMPDIR/$PKG ; $COMMAND) 2>&1)
    assertTrue 'zipfile not downloaded' "[ -f $TMPDIR/$PKG-1.zip ]"
    assertTrue 'zipfile not copied to +dfsg' "[ -f $TMPDIR/$PKG-1+dfsg.zip ]"
    CONTENTS="$(zipinfo -1 $TMPDIR/$PKG-1+dfsg.zip)"
    assertTrue 'file that must be present is excluded in the zip file'	\
                $(containsName "$CONTENTS" include-this)
    assertFalse 'file that must be excluded is present in the zip file'	\
                $(containsName "$CONTENTS" exclude-this)
    assertFalse "dir that must be excluded is present in the zip file"	\
                $(containsName "$CONTENTS" exclude-dir)
    assertFalse "subdir that must be excluded is present in the zip file"	\
                $(containsName "$CONTENTS" subdir)
    assertFalse "hidden file that must be excluded is present in the zip file"	\
                $(containsName "$CONTENTS" .hidden)
    assertFalse "path with whitespace that must be excluded is present"	\
                $(containsName "$CONTENTS" "; echo baz; #/")

    cleanup

}

. shunit2
